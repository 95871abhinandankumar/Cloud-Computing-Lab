# -*- coding: utf-8 -*-
"""assignment_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YfBKFKxR-Uu_IrvUoip3BreDs7DZxGKA

## Problem 1
Write a function to break down a string into a list of characters.
"""

from typing import List
def stringToCharList(word: str) -> List[str]:
  """ To convert the string into list of characters.
  doctests:
  >>> stringToCharList("abc")
  ['a', 'b', 'c']
  >>> stringToCharList("abcdefg")
  ['a', 'b', 'c', 'd', 'e', 'f', 'g']
  """
  return [char for char in word]


"""## Problem 2
Write a function to reverse output of the problem 1 back into a string
"""

def charListToString(charList: List[str]) -> str:
  """
  doctests:
  >>> charListToString(['a', 'b', 'c'])
  'abc'
  >>> charListToString(['a', 'b', 'c', 'd', 'e', 'f', 'g'])
  'abcdefg'
  """
  return "".join(charList)


"""## Problem 3
Write a function generate a list of n random numbers.
Use the inbuilt `random` module.

"""

import random
def listOfRandomNumber(n: int) -> List[int]:
  # """ To convert the string into list of characters.
  # doctests:
  # >>> listOfRandomNumber(5)
  # [5, 2, 3, 1, 5]
  # >>> listOfRandomNumber(4)
  # [4, 2 , 1, 2]
  # """
  return random.sample(range(1, n+1), n)

"""## Problem 4
Write a function a sort a given list of numbers in descending order.
"""

def sortInDesending(nums: List[int]) -> List[int]:
  """
  doctests:
  >>> sortInDesending([1,2,3,4,5])
  [5, 4, 3, 2, 1]
  >>> sortInDesending([1, 2, 3, 4])
  [4, 3, 2, 1]
  """
  nums.sort(reverse=True)
  return nums


"""## Problem 5
Write a function to get frequency of each numbers in a list of numbers. 
Use a python `dict` to solve this.

"""

from typing import Dict
def countFrequency(nums: List[int]) -> Dict[int, int]:
  """ 
  doctests:
  >>> countFrequency([1,1,3,2,3,2,3,2,2])
  {1: 2, 3: 3, 2: 4}
  >>> countFrequency([1,1,3,2,3,2,3,2,2,1,2])
  {1: 3, 3: 3, 2: 5}
  """
  freq = {}
  for item in nums:
    if (item in freq):
      freq[item] += 1
    else:
      freq[item] = 1
  return freq


"""## Problem 6
Write a function to get all the unique elements from given list.
Your solution must use `set` to solve this.

"""

from typing import List, Set, Dict, Tuple, Optional
def getUniqueElement(nums: List[int]) -> Set[int]:
  """
  doctests:
  >>> getUniqueElement([1,1,3,2,3,2,3,2,2])
  {1, 2, 3}
  >>> getUniqueElement([1,1,3,2,3,2,3,2,2,1,2])
  {1, 2, 3}
  """
  uniqueElement = set()
  for item in nums:
    uniqueElement.add(item)
  return uniqueElement


"""# Problem 7
Write a function to get the first repeating element from list. Your 
solution must use `set` to solve this.

"""

def getFirstRepeatedElement(nums: List[int]) -> int:
  """
  doctests:
  >>> getFirstRepeatedElement([1,1,3,2,3,2,3,2,2])
  1
  >>> getFirstRepeatedElement([1,1,3,2,3,2,3,2,2,1,2])
  1
  """
  uniqueElement = set()
  firstRepeatedElement=-1
  for item in nums:
    if item in uniqueElement:
      firstRepeatedElement = item
      break;
    uniqueElement.add(item)
  return firstRepeatedElement


"""## Problem 8
Write a function that takes an integer n and output a `dict` containing 
keys from 0,2 ... to n and each key is mapped to a list containing the 
square and cube of the number.
"""

def squareAndCube(num : int) -> Dict[int, List]:
  """ 
  doctests:
  >>> squareAndCube(3)
  {0: [0, 0], 1: [1, 1], 2: [4, 8], 3: [9, 27]}
  >>> squareAndCube(4)
  {0: [0, 0], 1: [1, 1], 2: [4, 8], 3: [9, 27], 4: [16, 64]}
  """
  sqrCube = {}
  for i in range(num+1):
    sqrCube[i] = [i**2, i**3]
  return sqrCube


"""## Problem 9
Given two lists of equal size, write a function to create tuples of 
each consecutive element having same index. Use `zip` in some capacity 
to solve this.
"""

def mergeList(list1: List, list2:List) -> List[Tuple]:
  """
  doctests:
  >>> mergeList( [1,2,3,4], ['a','b','c','d'])
  [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]
  >>> mergeList( [1,2,3,4,5], ['a','b','c','d','e'])
  [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')]
  """
  
  return list(zip(list1, list2))


"""## Problem 10
Write a function that uses list comprehension to generate the squares 
of 0 to n.

"""

def first_nsquare(num : int) -> List[int]:
  """ 
  doctests:
  >>> first_nsquare(3)
  [0, 1, 4, 9]
  >>> first_nsquare(5)
  [0, 1, 4, 9, 16, 25]
  """
  return [i**2 for i in range(num+1)]


"""## Problem 11
Write a function that uses dictionary comprehension to generate a 
mapping from (0 to n) to their squares.
"""

def mapFirst_nsquare(num : int) -> Dict[int, int]:
  """ 
  doctests:
  >>> mapFirst_nsquare(3)
  {0: 0, 1: 1, 2: 4, 3: 9}
  >>> mapFirst_nsquare(7)
  {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49}
  """
  return {i:i**2 for i in range(num+1)}


"""## Problem 12.
Write a `class` such that :
1. The initializer takes an arbitrary list of atomic values as input 
and saves it in a instance variable.
2. Has a method called `apply` which has the following functionality:
 1. Accepts a function as a parameter. You can use a lambda 
function. 
 2. Applies the function to saved list and return the output. The 
instance variable must not be modified.
 3. If it fails `raise` an `Exception` with a custom error message. 
You can use `try` and `except` here.

"""

class MyClass:
  """
  >>> c1 = MyClass([1,2,3,4])
  >>> print(c1.apply(lambda x:x**2))
  [1, 4, 9, 16]

  >>> c1 = MyClass([1,2,3,4, 5])
  >>> print(c1.apply(lambda x:x**2))
  [1, 4, 9, 16, 25]

  """
  def __init__(self, nums: List):
    self.nums = nums

  def apply(self, fun) -> List:
    list1 = []
    try:
      list1 = [fun(i) for i in self.nums]
      return list1
    except error:
      print(error)





c1 = MyClass([1,2,3,4])
print(c1.apply(lambda x:x**2))
c1 = MyClass([1,2,3,4,5])
print(c1.apply(lambda x:x**2))

"""## Problem 13
Write a function takes as input a list of words and upper-cases each 
word. Use `functools.map` in some capacity to solve this.
"""

def convertToUpperCase(listOfWords : List[str]) -> List[str]:
  """ 
  doctests:
  >>> convertToUpperCase(['aa','bb','cd','e'])
  ['AA', 'BB', 'CD', 'E']
  >>> convertToUpperCase(['aa','bb','cd','ee', 'ff'])
  ['AA', 'BB', 'CD', 'EE', 'FF']
  """
  return list(map(lambda word : word.upper() , listOfWords))


"""## Problem 14:
Write a function to find the product of all the numbers in a list using 
`functools.reduce` in some capacity.

"""

import functools
import operator
def reduceList(nums : List[int]) -> int:
  """ 
  doctests:
  >>> reduceList([1,2,3,4,5])
  120
  >>> reduceList([1,2,3,4])
  24
  """
  return functools.reduce(operator.mul, nums)



if __name__ == "__main__":
  import doctest
  #print(listOfRandomNumber(8))
  doctest.testmod(verbose = True)
